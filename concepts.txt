# SPA's: Single Page Application, um único arquivo 
index vai rodar toda a aplicação.

# JSX: As tags HTML vão renderizar todas dentro do JS, ou seja,
todas sendo passadas dentro de um "return" na função.

# Virtual DOM: Observa as alterações realizadas no react e passando
para a tela do usuário.

# Comando básico de criação do projeto React: npx creacte-react-app my-app.

# Não esqueça o 'npm start' para iniciar a aplicação no navegador.

# Pode excluir alguns arquivos inicialmente desnecessários, como:
- App.test.js
- reportWebVitals.js 
- setupTests.js 
- logo.svg 
- Não esqueça de remover tbm dentro do index.js: reportWebVitals(); e seu import.

# Para usar a interpolação de varáveis, use: {}.

# Sempre que for usar um componente, não esqueça de importar ele.

# Por boas práticas, pode-se criar um nova pasta dentro do src, chamada de components,
armazenando nela todo o conteúdo necessário.

# Props: valores que são passados para os componentes.
Esse valor é passado como um atributo, de "pai para filho".
Este, precisa ser resgatado dentro de uma propriedade chamada Props
na própria função do componente.

# Fragments: criação de componentes sem seu elemento pai, permitindo descomplicar 
os nós do DOM, sintaxe: <> </>.

# Props Avançado: Pode-se definir tipos para as props, como uma validação, chamda propTypes
no componente, e também podemos definir um valor padrão, usando o defaultProps.
São validações a nível de programação, então muitos erros que serão gerados pelas validações, vão
ser retornados pelo Console na inspeção de elemento da página.

# Eventos em React: Eventos que correspondem a um click, que são os mesmos que o DOM, normalmente,
o evento é atrelado a alguma tag para executá-lo, e um método é atribuído em um evento.

# useState é um hook do React, que permite os usuários manipularem o estado de um componente, 
funcionando também com eventos.

# Methods + Props: Os métodos do react podem ser passados por props, onde um componente filho pode ativar
o método de seu pai, esse método, é acessado por um evento.

# Renderização por Condição: Atrelar a exibição de um elemento a um IF, essa condição é chamada no React de
renderização condicional, sendo possível usar state para criar condições.

# Renderização de Listas: Para usá-las, vamos precisar de um array, e também de uma função map, que
percorre esses itens, é igualmente possível unir operadores condicionais na renderização.

# State lift: É uma técnicad e compartilhamento do state.

# Router: É um pacote para mudanças de URL sem o page reload da aplicação, trocando apenas uma parte do
layout, para usá-lo, é necessário a instalação desse pacote. ATENÇÃO -> O 'SWITCH' FUI SUBSTITUIDO POR 'ROUTES',
siga exatamente o que está no arquivo App.js, que o resultado ta garantido.

# React Icon: Um pacote externo, adicionavel por npm, podendo adicionar ícones que forma fácil.